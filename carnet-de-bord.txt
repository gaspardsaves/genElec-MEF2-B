GEN ELEC – CARNET DE BORD 

18 – 11 – 2024 :  

Première réunion : on se morfond dans la complexité du pdf qui nous a été fourni
On a réussi à trouver la façon de générer l’arbre en pouvant tout de même l’équilibrer. 
Le problème qui dérangeait était que lors de l’opération d’équilibrage de l’arbre des particuliers risquaient de se trouver relier au mauvais LV ou des etp au mauvais HV-A/HV-A. La solution trouver est d’équilibrer seulement des sous arbre de consommateurs.
On pense finalement crée plusieurs structures : HVA, HVB, LV, Consommateur avec un id pour savoir si on le conso est un particulier ou une etp. 
Après cette phase de réflexion nous nous accordons sur l’environnement dans lequel nous allons coder notre projet (vs code  et github desktop).

Nous nous rendons compte de nos incompréhensions le projet est un peu plus facile qu'envisagé
Nous rédigeons alors les structures.


1 - 12 - 2024 :

On se décide à créer un avl pour chaque type de structures (HVA, HVB, LV). On pense crée des fichiers tampons qui permettraient de gérer chacun des types d'AVL.
Nous en sommes finalement venu à se demander s'il était mieux de faire une ou plusieurs structures d'arbres.
Séparation des tâches et avancement des travaux
Ibra et JL sur les AVL
Gaspard sur le shell pour récupérer les LV, les HVA et les HVB (id et capacité) sur des fichiers tampons exploitables dans un second temps par le code C
Gaspard gère aussi le makefile et les headers ainsi que les tests qui sont faits sur des petites et des grosses quantités de données et s'assure de leur bon traitement dans un temps correct
Des problèmes de complexité se posent très rapidement sur le traitement des données par le script shell

2 -12 - 24 :
Modif header structures pour traiter une entité électrique sans se soucier de ce que c'est et de même pour compter le consommation
Modif shell pour utiliser grep et ne pas avoir de boucle ce qui améliore significativement la complexité
Implémentation de l'aide dans les paramétres du script et rédaction du fichier d'aide.
Rédaction du code AVL équilibrage et rotation

3 - 12 - 24 :
Ajout de robustesse dans le script shell :
- Nombre minimum d'arguments
- Vérification du premier argument (existence et possibilité de lire le fichier de données)
- Vérification de la validité des combinaisons d'arguments 2 et 3

4 - 12 - 24 :
Ajout de robustesse dans le script shell :
- Nombre maximum d'arguments
- Vérification de la validité de l'argument 2
- Vérification de la validité de l'argument 3
- Vérification de la validité de l'argument 4 s'il est présent
Début de la rédaction de l'extraction des données des consommateurs

5 - 12 - 24 :

Implémentation du quatrième argument optionnel des centrales dans le script.
Utilisation d'une valeur neutre '[0-9]+' pour ne pas inutilement dupliquer du code quand cet argument n'est pas appelé.
Les données sont désormais bien sélectionnées il ne manque plus que de les envoyer ensemble dans l'exécutable ou dans un fichier tampon.
Implémentation de la libération de la mémoire dans le code c, adaptation du code C aux modifications du shell.
Ajout d'une cible debug dans le makefile pour utiliser fsanitize.

8 - 12 - 24 :
Debug de la cible debug dans le makefile pour vérifier la bonne libération de la mémoire
Ajout de la vérification du retour du makefile dans le script shell et création d'un fichier make.log

9 - 12 - 24 :
Test avec un grand nombre de données : libération effective de la mémoire
Modification du code c pour enlever le tri par centrale qui est désormais traité par le script
Travail sur les expressions régulières dans les commandes grep du script shell pour pouvoir traiter l'ensemble des données en parcourant une seule fois le fichier.

10 - 12 -24 :
Commentaires et modulation du code C et du script